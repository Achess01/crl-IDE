/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[6,14,19,34,35,36,37,38,44],$V1=[1,8],$V2=[1,24],$V3=[1,19],$V4=[1,20],$V5=[1,21],$V6=[1,22],$V7=[1,23],$V8=[1,18],$V9=[6,14,34,35,36,37,38,44],$Va=[6,13,14,19,34,35,36,37,38,44],$Vb=[2,13],$Vc=[1,32],$Vd=[1,40],$Ve=[2,27],$Vf=[6,14,21,30,34,35,36,37,38,44,50,67,71,77,78,82,83,84,85,87,88],$Vg=[1,69],$Vh=[1,65],$Vi=[1,62],$Vj=[1,61],$Vk=[1,63],$Vl=[1,67],$Vm=[1,68],$Vn=[1,70],$Vo=[1,71],$Vp=[2,37],$Vq=[6,14,21,30,34,35,36,37,38,41,44,50,67,71,73,77,78,82,83,84,85,87,88],$Vr=[6,14,21,30,34,35,36,37,38,41,44,50,67,71,73,77,78,82,83,84,85,87,88,92],$Vs=[1,82],$Vt=[6,14,21,30,34,35,36,37,38,41,44,50,67,71,73,77,78,82,83,84,85,87,88,92,94],$Vu=[1,83],$Vv=[6,14,21,30,34,35,36,37,38,41,44,50,67,71,73,77,78,82,83,84,85,87,88,92,94,96],$Vw=[1,84],$Vx=[1,85],$Vy=[1,86],$Vz=[6,14,21,30,34,35,36,37,38,41,44,50,67,71,73,77,78,82,83,84,85,87,88,92,94,96,98,99,100],$VA=[1,87],$VB=[1,88],$VC=[1,89],$VD=[1,90],$VE=[6,14,21,30,34,35,36,37,38,41,44,50,67,71,73,77,78,82,83,84,85,87,88,92,94,96,98,99,100,102,103,104,105],$VF=[1,91],$VG=[1,92],$VH=[6,14,21,30,34,35,36,37,38,41,44,50,67,71,73,77,78,82,83,84,85,87,88,92,94,96,98,99,100,102,103,104,105,107,108],$VI=[1,93],$VJ=[1,94],$VK=[1,95],$VL=[6,14,21,30,34,35,36,37,38,41,44,50,67,71,73,77,78,82,83,84,85,87,88,92,94,96,98,99,100,102,103,104,105,107,108,110,111,112],$VM=[6,14,21,30,34,35,36,37,38,41,44,50,67,71,73,77,78,82,83,84,85,87,88,92,94,96,98,99,100,102,103,104,105,107,108,110,111,112,114],$VN=[30,41],$VO=[1,136],$VP=[6,14,21,34,35,36,37,38,44],$VQ=[1,156],$VR=[1,157],$VS=[1,158],$VT=[1,162],$VU=[1,159],$VV=[1,160],$VW=[1,161],$VX=[1,168],$VY=[1,166],$VZ=[1,167],$V_=[14,34,35,36,37,38,50,67,71,77,78,82,83,84,85,87,88],$V$=[14,21,34,35,36,37,38,50,67,71,77,78,82,83,84,85,87,88];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"initialState":3,"file_input":4,"file_input0":5,"EOF":6,"header_stmt":7,"input_stmt":8,"imports_opt":9,"incert_opt":10,"imports":11,"import":12,"Importar":13,"NAME":14,".":15,"crl":16,"new_line_opt":17,"incert":18,"Incerteza":19,"NUMBER":20,"NEWLINE":21,"input_stmt0":22,"global_stmt":23,"variable_declarators":24,"variable_assignment":25,"method_declarator":26,"type":27,"variable_list_declarators":28,"variable_declarator":29,",":30,"variable_id":31,"=":32,"expression":33,"Double":34,"Boolean":35,"String":36,"Int":37,"Char":38,"(":39,"params_list_opt":40,")":41,":":42,"block":43,"Void":44,"Principal":45,"params_list":46,"param":47,"INDENT":48,"body_block_opt":49,"DEDENT":50,"body_block":51,"body_stmt":52,"function_call_stmt":53,"if_stmt":54,"for_stmt":55,"while_stmt":56,"drawAST_stmt":57,"drawEXP_stmt":58,"drawTS_stmt":59,"show_stmt":60,"small_stmt":61,"break_stmt":62,"continue_stmt":63,"return_stmt":64,"list_values_opt":65,"list_values":66,"Si":67,"else_opt":68,"else_stmt":69,"Sino":70,"Para":71,"init_for":72,";":73,"op_for":74,"++":75,"--":76,"Mientras":77,"Mostrar":78,"string_literal":79,"format_expressions_opt":80,"format_expressions":81,"DibujarAST":82,"DibujarEXP":83,"DibujarTS":84,"Retorno":85,"return_expression_opt":86,"Detener":87,"Continuar":88,"conditional_expression":89,"conditional_or_expression":90,"conditional_xor_expression":91,"||":92,"conditional_and_expression":93,"!&":94,"equality_expression":95,"&&":96,"relational_expression":97,"==":98,"!=":99,"~":100,"additive_expression":101,"<":102,">":103,"<=":104,">=":105,"multiplicative_expression":106,"+":107,"-":108,"pow_expression":109,"*":110,"/":111,"%":112,"unary_expression":113,"^":114,"value_literal":115,"!":116,"char_literal":117,"true":118,"false":119,"STRING":120,"CHAR_LITERAL":121,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",13:"Importar",14:"NAME",15:".",16:"crl",19:"Incerteza",20:"NUMBER",21:"NEWLINE",30:",",32:"=",34:"Double",35:"Boolean",36:"String",37:"Int",38:"Char",39:"(",41:")",42:":",44:"Void",45:"Principal",48:"INDENT",50:"DEDENT",67:"Si",70:"Sino",71:"Para",73:";",75:"++",76:"--",77:"Mientras",78:"Mostrar",82:"DibujarAST",83:"DibujarEXP",84:"DibujarTS",85:"Retorno",87:"Detener",88:"Continuar",92:"||",94:"!&",96:"&&",98:"==",99:"!=",100:"~",102:"<",103:">",104:"<=",105:">=",107:"+",108:"-",110:"*",111:"/",112:"%",114:"^",116:"!",118:"true",119:"false",120:"STRING",121:"CHAR_LITERAL"},
productions_: [0,[3,1],[4,2],[5,2],[7,2],[9,0],[9,1],[11,1],[11,2],[12,5],[10,0],[10,1],[18,3],[17,0],[17,1],[8,0],[8,1],[22,1],[22,2],[23,2],[23,2],[23,2],[24,2],[28,1],[28,3],[29,1],[29,1],[31,1],[25,3],[27,1],[27,1],[27,1],[27,1],[27,1],[26,7],[26,7],[26,7],[40,0],[40,1],[46,1],[46,3],[47,2],[43,4],[49,0],[49,1],[51,1],[51,2],[52,2],[52,2],[52,2],[52,1],[52,1],[52,1],[52,2],[52,2],[52,2],[52,2],[52,1],[61,2],[61,2],[61,2],[53,4],[65,0],[65,1],[66,1],[66,3],[54,7],[68,0],[68,1],[69,3],[55,10],[72,4],[74,1],[74,1],[56,6],[60,5],[80,0],[80,2],[81,1],[81,3],[57,4],[58,4],[59,3],[64,2],[86,0],[86,1],[62,1],[63,1],[33,1],[89,1],[90,1],[90,3],[91,1],[91,3],[93,1],[93,3],[95,1],[95,3],[95,3],[95,3],[97,1],[97,3],[97,3],[97,3],[97,3],[101,1],[101,3],[101,3],[106,1],[106,3],[106,3],[106,3],[109,1],[109,3],[113,1],[113,1],[113,1],[113,2],[113,3],[113,2],[115,1],[115,1],[115,1],[115,1],[115,1],[79,1],[117,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0] 
break;
case 2:
         
        this.$ = new yy.Program(this._$, $$[$0-1]);
    
break;
case 3: case 4:
          
          this.$ = $$[$0-1].concat($$[$0]);
      
break;
case 5: case 10: case 37: case 43: case 62: case 67:
this.$ = []
break;
case 6: case 16: case 38: case 44: case 50: case 51: case 52: case 57: case 63: case 68: case 69: case 114:
this.$ = $$[$0]
break;
case 7: case 11: case 23: case 39: case 64:
this.$ = [$$[$0]]
break;
case 8:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 9:

        this.$ = new yy.ImportDeclaration(this._$, $$[$0-3]);
    
break;
case 12:
this.$ = new yy.Incerteza(this._$, Number($$[$0-1]))
break;
case 15:
this.$=[]
break;
case 17:
 
        if($$[$0].constructor.name === 'Array'){
            this.$ = $$[$0];
        }else{
            this.$ = [$$[$0]];
        } 
    
break;
case 18:
        
        if($$[$0].constructor.name === 'Array'){
            $$[$0-1].push(...$$[$0]);
        }else{
            $$[$0-1].push($$[$0])
        }        
        this.$ = $$[$0-1];
    
break;
case 19: case 20: case 21: case 42: case 47: case 48: case 49: case 53: case 54: case 55: case 56: case 58: case 59: case 60:
this.$ = $$[$0-1]
break;
case 22:

        $$[$0].forEach(v => v.type = $$[$0-1]);
        //this.$ = new yy.VariableDeclaration(this._$, $$[$0], $$[$0-1]);
        this.$ = $$[$0];
    
break;
case 24: case 40: case 65: case 79:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 25:
         
        this.$ = new yy.VariableDeclarator(this._$, $$[$0], null);
    
break;
case 26:

        this.$ = new yy.VariableDeclarator(this._$, $$[$0].id, $$[$0].expression);
    
break;
case 27:
this.$ = new yy.Identifier(this._$, $$[$0]);
break;
case 28:
this.$ = new yy.Assignment(this._$, $$[$0-2], $$[$0])
break;
case 29:
this.$ = yy.Type.Double
break;
case 30:
this.$ = yy.Type.Boolean
break;
case 31:
this.$ = yy.Type.String
break;
case 32:
this.$ = yy.Type.Int
break;
case 33:
this.$ = yy.Type.Char
break;
case 34:

        this.$ = new yy.functionDeclaration(this._$, $$[$0-5], $$[$0-3], $$[$0-6], $$[$0]);
    
break;
case 35:

        this.$ = new yy.functionDeclaration(this._$, $$[$0-5], $$[$0-3], yy.Type.Void, $$[$0]);
    
break;
case 36:

        this.$ = new yy.functionMain(this._$, $$[$0]);
    
break;
case 41:
this.$ = new yy.functionParam(this._$, $$[$0-1], $$[$0])
break;
case 45:

        if($$[$0].constructor.name === 'Array'){
            this.$ = $$[$0];
        }else{
            this.$ = [$$[$0]];
        }         
    
break;
case 46:
        
        if($$[$0].constructor.name === 'Array'){
            $$[$0-1].push(...$$[$0]);
        }else{
            $$[$0-1].push($$[$0]);
        }                
        this.$ = $$[$0-1];
    
break;
case 61:
this.$ = new yy.CallFunction(this._$, $$[$0-3], $$[$0-1])
break;
case 66:
this.$ = new yy.IfStmt(this._$, $$[$0-4], $$[$0-1], $$[$0])
break;
case 70:
        
        this.$ = new yy.forStmt(this._$, $$[$0], $$[$0-7], $$[$0-5], $$[$0-3]);
    
break;
case 71:
this.$ = new yy.VariableDeclarator(this._$, $$[$0-2], $$[$0]);
break;
case 72: case 73:
this.$ = yytext;
break;
case 74:
this.$ = new yy.whileStmt(this._$, $$[$0], $$[$0-3]);
break;
case 75:
this.$ = new yy.Mostrar(this._$, $$[$0-2], $$[$0-1]);
break;
case 76:
this.$ = [];
break;
case 77: case 85: case 88: case 89: case 90: case 92: case 94: case 96: case 100: case 105: case 108: case 112:
this.$ = $$[$0];
break;
case 78:
this.$ = [$$[$0]];
break;
case 80:
this.$ = new yy.DibujarAST(this._$, $$[$0-1]);
break;
case 81:
this.$ = new yy.DibujarEXP($$[$0-1]);
break;
case 82:
this.$ = new yy.DibujarTS(this._$);
break;
case 83:
this.$ = new yy.returnStmt(this._$, $$[$0])
break;
case 84:
this.$ = null;
break;
case 86:
this.$ = new yy.breakStmt(this._$);
break;
case 87:
this.$ = new yy.continueStmt(this._$);
break;
case 91: case 93: case 95:
this.$ = new yy.LogicalExpression(this._$, yy.Type.Boolean, $$[$0-2], $$[$0-1], $$[$0]);
break;
case 97: case 98: case 99: case 101: case 102: case 103: case 104:
this.$ = new yy.BinaryExpression(this._$, yy.Type.Boolean, $$[$0-2], $$[$0-1], $$[$0]);
break;
case 106: case 107: case 109: case 110: case 111: case 113:
this.$ = new yy.BinaryExpression(this._$, null, $$[$0-2], $$[$0-1], $$[$0]);
break;
case 115: case 116:
this.$ = new yy.UnaryExpression(this._$, null, null, $$[$0]);
break;
case 117: case 119:

        $$[$0].operator = $$[$0-1];
        this.$ = $$[$0];
    
break;
case 118:
this.$ = $$[$0-1];
break;
case 120:
this.$ = new yy.UnaryExpression(this._$, yy.Type.String, null, $$[$0]);
break;
case 121:

        let tp;
        let num = Number($$[$0]);
        num % 1 != 0 ? tp = yy.Type.Double
                            : tp = yy.Type.Int
        this.$ = new yy.UnaryExpression(this._$, tp, null, num);
    
break;
case 122:
this.$ = new yy.UnaryExpression(this._$, yy.Type.Char, null, $$[$0]);
break;
case 123:
this.$ = new yy.UnaryExpression(this._$, yy.Type.Boolean, null, true);
break;
case 124:
this.$ = new yy.UnaryExpression(this._$, yy.Type.Boolean, null, false);
break;
case 125:

        let val1 = $$[$0].replaceAll("\"", "");
        this.$ = val1;
    
break;
case 126:

        let val2 = $$[$0].replaceAll("'", "");
        this.$ = val2;
    
break;
}
},
table: [o($V0,[2,5],{3:1,4:2,5:3,7:4,9:5,11:6,12:7,13:$V1}),{1:[3]},{1:[2,1]},{6:[1,9]},{6:[2,15],8:10,14:$V2,22:11,23:12,24:13,25:14,26:15,27:16,31:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,44:$V8},o($V9,[2,10],{10:25,18:26,19:[1,27]}),o($V0,[2,6],{12:28,13:$V1}),o($Va,[2,7]),{14:[1,29]},{1:[2,2]},{6:[2,3]},{6:[2,16],14:$V2,23:30,24:13,25:14,26:15,27:16,31:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,44:$V8},o($V9,[2,17]),o($V9,$Vb,{17:31,21:$Vc}),o($V9,$Vb,{17:33,21:$Vc}),o($V9,$Vb,{17:34,21:$Vc}),{14:[1,36],25:39,28:35,29:37,31:38},{32:$Vd},{14:[1,41],45:[1,42]},{14:[2,29]},{14:[2,30]},{14:[2,31]},{14:[2,32]},{14:[2,33]},o([6,14,21,30,32,34,35,36,37,38,41,44,50,67,71,77,78,82,83,84,85,87,88],$Ve),o($V9,[2,4]),o($V9,[2,11]),{20:[1,43]},o($Va,[2,8]),{15:[1,44]},o($V9,[2,18]),o($V9,[2,19]),o([6,13,14,19,34,35,36,37,38,44,50,67,71,77,78,82,83,84,85,87,88],[2,14]),o($V9,[2,20]),o($V9,[2,21]),o([6,14,21,34,35,36,37,38,44,50,67,71,77,78,82,83,84,85,87,88],[2,22],{30:[1,45]}),o([6,14,21,30,32,34,35,36,37,38,44],$Ve,{39:[1,46]}),o($Vf,[2,23]),o($Vf,[2,25],{32:$Vd}),o($Vf,[2,26]),{14:$Vg,20:$Vh,31:59,33:47,39:$Vi,53:60,79:64,89:48,90:49,91:50,93:51,95:52,97:53,101:54,106:55,108:$Vj,109:56,113:57,115:58,116:$Vk,117:66,118:$Vl,119:$Vm,120:$Vn,121:$Vo},{39:[1,72]},{39:[1,73]},o($V9,$Vb,{17:74,21:$Vc}),{16:[1,75]},{14:$V2,25:39,29:76,31:38},{27:80,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,40:77,41:$Vp,46:78,47:79},o($Vf,[2,28]),o($Vq,[2,88]),o($Vq,[2,89],{92:[1,81]}),o($Vr,[2,90],{94:$Vs}),o($Vt,[2,92],{96:$Vu}),o($Vv,[2,94],{98:$Vw,99:$Vx,100:$Vy}),o($Vz,[2,96],{102:$VA,103:$VB,104:$VC,105:$VD}),o($VE,[2,100],{107:$VF,108:$VG}),o($VH,[2,105],{110:$VI,111:$VJ,112:$VK}),o($VL,[2,108]),o($VL,[2,112],{114:[1,96]}),o($VM,[2,114]),o($VM,[2,115]),o($VM,[2,116]),{14:$Vg,20:$Vh,31:59,39:$Vi,53:60,79:64,108:$Vj,113:97,115:58,116:$Vk,117:66,118:$Vl,119:$Vm,120:$Vn,121:$Vo},{14:$Vg,20:$Vh,31:59,33:98,39:$Vi,53:60,79:64,89:48,90:49,91:50,93:51,95:52,97:53,101:54,106:55,108:$Vj,109:56,113:57,115:58,116:$Vk,117:66,118:$Vl,119:$Vm,120:$Vn,121:$Vo},{14:$Vg,20:$Vh,31:59,39:$Vi,53:60,79:64,108:$Vj,113:99,115:58,116:$Vk,117:66,118:$Vl,119:$Vm,120:$Vn,121:$Vo},o($VM,[2,120]),o($VM,[2,121]),o($VM,[2,122]),o($VM,[2,123]),o($VM,[2,124]),o([6,14,21,30,32,34,35,36,37,38,41,44,50,67,71,73,77,78,82,83,84,85,87,88,92,94,96,98,99,100,102,103,104,105,107,108,110,111,112,114],$Ve,{39:[1,100]}),o($VM,[2,125]),o($VM,[2,126]),{27:80,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,40:101,41:$Vp,46:78,47:79},{27:80,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,40:102,41:$Vp,46:78,47:79},o($V9,[2,12]),o($Va,$Vb,{17:103,21:$Vc}),o($Vf,[2,24]),{41:[1,104]},{30:[1,105],41:[2,38]},o($VN,[2,39]),{14:$V2,31:106},{14:$Vg,20:$Vh,31:59,39:$Vi,53:60,79:64,91:107,93:51,95:52,97:53,101:54,106:55,108:$Vj,109:56,113:57,115:58,116:$Vk,117:66,118:$Vl,119:$Vm,120:$Vn,121:$Vo},{14:$Vg,20:$Vh,31:59,39:$Vi,53:60,79:64,93:108,95:52,97:53,101:54,106:55,108:$Vj,109:56,113:57,115:58,116:$Vk,117:66,118:$Vl,119:$Vm,120:$Vn,121:$Vo},{14:$Vg,20:$Vh,31:59,39:$Vi,53:60,79:64,95:109,97:53,101:54,106:55,108:$Vj,109:56,113:57,115:58,116:$Vk,117:66,118:$Vl,119:$Vm,120:$Vn,121:$Vo},{14:$Vg,20:$Vh,31:59,39:$Vi,53:60,79:64,97:110,101:54,106:55,108:$Vj,109:56,113:57,115:58,116:$Vk,117:66,118:$Vl,119:$Vm,120:$Vn,121:$Vo},{14:$Vg,20:$Vh,31:59,39:$Vi,53:60,79:64,97:111,101:54,106:55,108:$Vj,109:56,113:57,115:58,116:$Vk,117:66,118:$Vl,119:$Vm,120:$Vn,121:$Vo},{14:$Vg,20:$Vh,31:59,39:$Vi,53:60,79:64,97:112,101:54,106:55,108:$Vj,109:56,113:57,115:58,116:$Vk,117:66,118:$Vl,119:$Vm,120:$Vn,121:$Vo},{14:$Vg,20:$Vh,31:59,39:$Vi,53:60,79:64,101:113,106:55,108:$Vj,109:56,113:57,115:58,116:$Vk,117:66,118:$Vl,119:$Vm,120:$Vn,121:$Vo},{14:$Vg,20:$Vh,31:59,39:$Vi,53:60,79:64,101:114,106:55,108:$Vj,109:56,113:57,115:58,116:$Vk,117:66,118:$Vl,119:$Vm,120:$Vn,121:$Vo},{14:$Vg,20:$Vh,31:59,39:$Vi,53:60,79:64,101:115,106:55,108:$Vj,109:56,113:57,115:58,116:$Vk,117:66,118:$Vl,119:$Vm,120:$Vn,121:$Vo},{14:$Vg,20:$Vh,31:59,39:$Vi,53:60,79:64,101:116,106:55,108:$Vj,109:56,113:57,115:58,116:$Vk,117:66,118:$Vl,119:$Vm,120:$Vn,121:$Vo},{14:$Vg,20:$Vh,31:59,39:$Vi,53:60,79:64,106:117,108:$Vj,109:56,113:57,115:58,116:$Vk,117:66,118:$Vl,119:$Vm,120:$Vn,121:$Vo},{14:$Vg,20:$Vh,31:59,39:$Vi,53:60,79:64,106:118,108:$Vj,109:56,113:57,115:58,116:$Vk,117:66,118:$Vl,119:$Vm,120:$Vn,121:$Vo},{14:$Vg,20:$Vh,31:59,39:$Vi,53:60,79:64,108:$Vj,109:119,113:57,115:58,116:$Vk,117:66,118:$Vl,119:$Vm,120:$Vn,121:$Vo},{14:$Vg,20:$Vh,31:59,39:$Vi,53:60,79:64,108:$Vj,109:120,113:57,115:58,116:$Vk,117:66,118:$Vl,119:$Vm,120:$Vn,121:$Vo},{14:$Vg,20:$Vh,31:59,39:$Vi,53:60,79:64,108:$Vj,109:121,113:57,115:58,116:$Vk,117:66,118:$Vl,119:$Vm,120:$Vn,121:$Vo},{14:$Vg,20:$Vh,31:59,39:$Vi,53:60,79:64,108:$Vj,109:122,113:57,115:58,116:$Vk,117:66,118:$Vl,119:$Vm,120:$Vn,121:$Vo},o($VM,[2,117]),{41:[1,123]},o($VM,[2,119]),{14:$Vg,20:$Vh,31:59,33:126,39:$Vi,41:[2,62],53:60,65:124,66:125,79:64,89:48,90:49,91:50,93:51,95:52,97:53,101:54,106:55,108:$Vj,109:56,113:57,115:58,116:$Vk,117:66,118:$Vl,119:$Vm,120:$Vn,121:$Vo},{41:[1,127]},{41:[1,128]},o($Va,[2,9]),{42:[1,129]},{27:80,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,47:130},o($VN,[2,41]),o($Vr,[2,91],{94:$Vs}),o($Vt,[2,93],{96:$Vu}),o($Vv,[2,95],{98:$Vw,99:$Vx,100:$Vy}),o($Vz,[2,97],{102:$VA,103:$VB,104:$VC,105:$VD}),o($Vz,[2,98],{102:$VA,103:$VB,104:$VC,105:$VD}),o($Vz,[2,99],{102:$VA,103:$VB,104:$VC,105:$VD}),o($VE,[2,101],{107:$VF,108:$VG}),o($VE,[2,102],{107:$VF,108:$VG}),o($VE,[2,103],{107:$VF,108:$VG}),o($VE,[2,104],{107:$VF,108:$VG}),o($VH,[2,106],{110:$VI,111:$VJ,112:$VK}),o($VH,[2,107],{110:$VI,111:$VJ,112:$VK}),o($VL,[2,109]),o($VL,[2,110]),o($VL,[2,111]),o($VL,[2,113]),o($VM,[2,118]),{41:[1,131]},{30:[1,132],41:[2,63]},o($VN,[2,64]),{42:[1,133]},{42:[1,134]},{21:$VO,43:135},o($VN,[2,40]),o($VM,[2,61]),{14:$Vg,20:$Vh,31:59,33:137,39:$Vi,53:60,79:64,89:48,90:49,91:50,93:51,95:52,97:53,101:54,106:55,108:$Vj,109:56,113:57,115:58,116:$Vk,117:66,118:$Vl,119:$Vm,120:$Vn,121:$Vo},{21:$VO,43:138},{21:$VO,43:139},o($VP,[2,34]),{48:[1,140]},o($VN,[2,65]),o($VP,[2,35]),o($VP,[2,36]),{14:$Vg,24:144,25:145,27:155,31:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,49:141,50:[2,43],51:142,52:143,53:146,54:147,55:148,56:149,57:150,58:151,59:152,60:153,61:154,62:163,63:164,64:165,67:$VQ,71:$VR,77:$VS,78:$VT,82:$VU,83:$VV,84:$VW,85:$VX,87:$VY,88:$VZ},{50:[1,169]},{14:$Vg,24:144,25:145,27:155,31:17,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,50:[2,44],52:170,53:146,54:147,55:148,56:149,57:150,58:151,59:152,60:153,61:154,62:163,63:164,64:165,67:$VQ,71:$VR,77:$VS,78:$VT,82:$VU,83:$VV,84:$VW,85:$VX,87:$VY,88:$VZ},o($V_,[2,45]),o($V_,$Vb,{17:171,21:$Vc}),o($V_,$Vb,{17:172,21:$Vc}),o($V_,$Vb,{17:173,21:$Vc}),o($V_,[2,50]),o($V_,[2,51]),o($V_,[2,52]),o($V_,$Vb,{17:174,21:$Vc}),o($V_,$Vb,{17:175,21:$Vc}),o($V_,$Vb,{17:176,21:$Vc}),o($V_,$Vb,{17:177,21:$Vc}),o($V_,[2,57]),{14:$V2,25:39,28:35,29:37,31:38},{39:[1,178]},{39:[1,179]},{39:[1,180]},{39:[1,181]},{39:[1,182]},{39:[1,183]},{39:[1,184]},o($V_,$Vb,{17:185,21:$Vc}),o($V_,$Vb,{17:186,21:$Vc}),{21:[1,187]},o($V$,[2,86]),o($V$,[2,87]),{14:$Vg,20:$Vh,21:[2,84],31:59,33:189,39:$Vi,53:60,79:64,86:188,89:48,90:49,91:50,93:51,95:52,97:53,101:54,106:55,108:$Vj,109:56,113:57,115:58,116:$Vk,117:66,118:$Vl,119:$Vm,120:$Vn,121:$Vo},o([6,14,21,34,35,36,37,38,44,50,67,70,71,77,78,82,83,84,85,87,88],[2,42]),o($V_,[2,46]),o($V_,[2,47]),o($V_,[2,48]),o($V_,[2,49]),o($V_,[2,53]),o($V_,[2,54]),o($V_,[2,55]),o($V_,[2,56]),{14:$Vg,20:$Vh,31:59,33:190,39:$Vi,53:60,79:64,89:48,90:49,91:50,93:51,95:52,97:53,101:54,106:55,108:$Vj,109:56,113:57,115:58,116:$Vk,117:66,118:$Vl,119:$Vm,120:$Vn,121:$Vo},{37:[1,192],72:191},{14:$Vg,20:$Vh,31:59,33:193,39:$Vi,53:60,79:64,89:48,90:49,91:50,93:51,95:52,97:53,101:54,106:55,108:$Vj,109:56,113:57,115:58,116:$Vk,117:66,118:$Vl,119:$Vm,120:$Vn,121:$Vo},{14:$V2,31:194},{14:$Vg,20:$Vh,31:59,33:195,39:$Vi,53:60,79:64,89:48,90:49,91:50,93:51,95:52,97:53,101:54,106:55,108:$Vj,109:56,113:57,115:58,116:$Vk,117:66,118:$Vl,119:$Vm,120:$Vn,121:$Vo},{41:[1,196]},{79:197,120:$Vn},o($V_,[2,58]),o($V_,[2,59]),o($V_,[2,60]),{21:[2,83]},{21:[2,85]},{41:[1,198]},{73:[1,199]},{14:$V2,31:200},{41:[1,201]},{41:[1,202]},{41:[1,203]},o($V$,[2,82]),{30:[1,205],41:[2,76],80:204},{42:[1,206]},{14:$Vg,20:$Vh,31:59,33:207,39:$Vi,53:60,79:64,89:48,90:49,91:50,93:51,95:52,97:53,101:54,106:55,108:$Vj,109:56,113:57,115:58,116:$Vk,117:66,118:$Vl,119:$Vm,120:$Vn,121:$Vo},{32:[1,208]},{42:[1,209]},o($V$,[2,80]),o($V$,[2,81]),{41:[1,210]},{14:$Vg,20:$Vh,31:59,33:212,39:$Vi,53:60,79:64,81:211,89:48,90:49,91:50,93:51,95:52,97:53,101:54,106:55,108:$Vj,109:56,113:57,115:58,116:$Vk,117:66,118:$Vl,119:$Vm,120:$Vn,121:$Vo},{21:$VO,43:213},{73:[1,214]},{14:$Vg,20:$Vh,31:59,33:215,39:$Vi,53:60,79:64,89:48,90:49,91:50,93:51,95:52,97:53,101:54,106:55,108:$Vj,109:56,113:57,115:58,116:$Vk,117:66,118:$Vl,119:$Vm,120:$Vn,121:$Vo},{21:$VO,43:216},o($V$,[2,75]),{30:[1,217],41:[2,77]},o($VN,[2,78]),o($V_,[2,67],{68:218,69:219,70:[1,220]}),{74:221,75:[1,222],76:[1,223]},{73:[2,71]},o($V_,[2,74]),{14:$Vg,20:$Vh,31:59,33:224,39:$Vi,53:60,79:64,89:48,90:49,91:50,93:51,95:52,97:53,101:54,106:55,108:$Vj,109:56,113:57,115:58,116:$Vk,117:66,118:$Vl,119:$Vm,120:$Vn,121:$Vo},o($V_,[2,66]),o($V_,[2,68]),{42:[1,225]},{41:[1,226]},{41:[2,72]},{41:[2,73]},o($VN,[2,79]),{21:$VO,43:227},{42:[1,228]},o($V_,[2,69]),{21:$VO,43:229},o($V_,[2,70])],
defaultActions: {2:[2,1],9:[2,2],10:[2,3],19:[2,29],20:[2,30],21:[2,31],22:[2,32],23:[2,33],188:[2,83],189:[2,85],215:[2,71],222:[2,72],223:[2,73]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: 
                            // if the last statement in indented, need to force a dedent before EOF                            
                            if (this.indents == undefined) { this.indents = [0]; }                            
                            if (this.indents.length > 1) { 
                               this.begin( 'DEDENTS' ); 
                               this.unput(' '); // make sure EOF is not triggered 
                               this.dedents = 1; 
                               this.indents.pop();
                            } else { 
                                return 6; 
                            } 
                        
break;
case 1: if (this.indent == undefined) this.indent = 0; this.indent += 1 
break;
case 2: if (this.indent == undefined) this.indent = 0; this.indent = ( this.indent + 8 ) & -7 
break;
case 3: this.indent = 0 
break;
case 4:/* skip comments */
break;
case 5: 
                            this.unput( yy_.yytext )
                            if (this.indents == undefined) this.indents = [0];
                            var last = this.indents[ this.indents.length - 1 ]
                            if (this.indent == undefined) this.indent = 0;
                            if ( this.indent > last ) {
                                this.begin( 'INLINE' )
                                this.indents.push( this.indent )
                                return 48
                            } else if ( this.indent < last ) {
                                this.begin( 'DEDENTS' )
                                this.dedents = 0 // how many dedents occured
                                while( this.indents.length ) {
                                    this.dedents += 1
                                    this.indents.pop()
                                    last = this.indents[ this.indents.length - 1 ]
                                    if ( last == this.indent ) break
                                }
                                if ( !this.indents.length ) {
                                    console.log( "Error de tabulación" )
                                }
                            } else {
                                this.begin( 'INLINE' )
                            }
                        
break;
case 6:                            
                            this.unput( yy_.yytext )
                            if (this.dedents == undefined) this.dedents = 0;                            
                            if ( this.dedents-- > 0 ) {
                                return 50
                            } else {
                                this.begin( 'INLINE' )
                            }
                        
break;
case 7:
                            // implicit line joining
                            if (this.brackets_count == undefined) this.brackets_count = 0;
                            if ( this.brackets_count <= 0 ) {
                                this.indent = 0; 
                                this.begin( 'INITIAL' )
                                return 21
                            }
                        
break;
case 8:/* skip comments */
break;
case 9:/* skip line continuations */
break;
case 10:/* skip whitespace, separate tokens */
break;
case 11:return 121
break;
case 12:return 20
break;
case 13:return 20
break;
case 14:return 120
break;
case 15:
                            const keywords = [
                                "Importar", "Incerteza", "crl", 
                                "Double", "Boolean", "String", "Int", "Char", "Void",
                                "true", "false", "Principal", "Retorno", "Para", "Mientras",
                                "Si", "Sino", "Detener", "Continuar", "Mostrar", 
                                "DibujarAST", "DibujarEXP", "DibujarTS"
                            ]
                            return ( keywords.indexOf( yy_.yytext ) === -1 )
                                ? 'NAME'
                                : yy_.yytext;
                        
break;
case 16:
                            if (this.brackets_count == undefined) this.brackets_count = 0;
                            if (yy_.yytext == '(' ) {
                                this.brackets_count += 1
                            } else if (yy_.yytext == ')' ) {
                                this.brackets_count -= 1
                            }
                            return yy_.yytext 
                        
break;
case 17:
                            console.log( "Caracter inesperado" + yy_.yytext)
                        
break;
}
},
rules: [/^(?:$)/,/^(?: )/,/^(?:\t)/,/^(?:\n)/,/^(?:(((''')([^(\'\'\')]|')*('''))|((!!)[^\n]*)))/,/^(?:.)/,/^(?:.)/,/^(?:\n)/,/^(?:(((''')([^(\'\'\')]|')*('''))|((!!)[^\n]*)))/,/^(?:\\\n[\ \t\f]*)/,/^(?:[\ \t\f]+)/,/^(?:('(([^\\\n\']))'))/,/^(?:((((([1-9]([0-9])*)|0)))(\.([0-9])+)?))/,/^(?:(((([1-9]([0-9])*)|0))))/,/^(?:("(([^\\\n\"])|(\\.|\\\n))*"))/,/^(?:((((_)|(([A-Z]))|(([a-z]))))((((_)|(([A-Z]))|(([a-z])))|([0-9])))*))/,/^(?:(\+\+|--|\+|-|\*|\/|%|\^|\.|:|;|,|\(|\)|==|!=|<=|>=|<|>|~|&&|\|\||!&|!|=))/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5],"inclusive":true},"INLINE":{"rules":[0,7,8,9,10,11,12,13,14,15,16,17],"inclusive":true},"DEDENTS":{"rules":[6],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}