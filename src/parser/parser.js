/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,6,14,19,34,35,36,37,38,44],$V1=[1,8],$V2=[1,25],$V3=[1,20],$V4=[1,21],$V5=[1,22],$V6=[1,23],$V7=[1,24],$V8=[1,19],$V9=[2,6,14,34,35,36,37,38,44],$Va=[2,6,13,14,19,34,35,36,37,38,44],$Vb=[6,14,34,35,36,37,38,44],$Vc=[2,13],$Vd=[1,34],$Ve=[1,42],$Vf=[2,28],$Vg=[6,14,21,30,34,35,36,37,38,44,50,67,71,77,78,82,83,84,85,87,88],$Vh=[1,71],$Vi=[1,67],$Vj=[1,64],$Vk=[1,63],$Vl=[1,65],$Vm=[1,69],$Vn=[1,70],$Vo=[1,72],$Vp=[1,73],$Vq=[2,38],$Vr=[6,14,21,30,34,35,36,37,38,41,44,50,67,71,73,77,78,82,83,84,85,87,88],$Vs=[6,14,21,30,34,35,36,37,38,41,44,50,67,71,73,77,78,82,83,84,85,87,88,92],$Vt=[1,84],$Vu=[6,14,21,30,34,35,36,37,38,41,44,50,67,71,73,77,78,82,83,84,85,87,88,92,94],$Vv=[1,85],$Vw=[6,14,21,30,34,35,36,37,38,41,44,50,67,71,73,77,78,82,83,84,85,87,88,92,94,96],$Vx=[1,86],$Vy=[1,87],$Vz=[1,88],$VA=[6,14,21,30,34,35,36,37,38,41,44,50,67,71,73,77,78,82,83,84,85,87,88,92,94,96,98,99,100],$VB=[1,89],$VC=[1,90],$VD=[1,91],$VE=[1,92],$VF=[6,14,21,30,34,35,36,37,38,41,44,50,67,71,73,77,78,82,83,84,85,87,88,92,94,96,98,99,100,102,103,104,105],$VG=[1,93],$VH=[1,94],$VI=[6,14,21,30,34,35,36,37,38,41,44,50,67,71,73,77,78,82,83,84,85,87,88,92,94,96,98,99,100,102,103,104,105,107,108],$VJ=[1,95],$VK=[1,96],$VL=[1,97],$VM=[6,14,21,30,34,35,36,37,38,41,44,50,67,71,73,77,78,82,83,84,85,87,88,92,94,96,98,99,100,102,103,104,105,107,108,110,111,112],$VN=[6,14,21,30,34,35,36,37,38,41,44,50,67,71,73,77,78,82,83,84,85,87,88,92,94,96,98,99,100,102,103,104,105,107,108,110,111,112,114],$VO=[30,41],$VP=[1,138],$VQ=[6,14,21,34,35,36,37,38,44],$VR=[1,159],$VS=[1,160],$VT=[1,161],$VU=[1,165],$VV=[1,162],$VW=[1,163],$VX=[1,164],$VY=[1,171],$VZ=[1,169],$V_=[1,170],$V$=[14,34,35,36,37,38,50,67,71,77,78,82,83,84,85,87,88],$V01=[14,21,34,35,36,37,38,50,67,71,77,78,82,83,84,85,87,88];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"initialState":3,"file_input":4,"file_input0":5,"EOF":6,"header_stmt":7,"input_stmt":8,"imports_opt":9,"incert_opt":10,"imports":11,"import":12,"Importar":13,"NAME":14,".":15,"crl":16,"new_line_opt":17,"incert":18,"Incerteza":19,"NUMBER":20,"NEWLINE":21,"input_stmt0":22,"global_stmt":23,"variable_declarators":24,"variable_assignment":25,"method_declarator":26,"type":27,"variable_list_declarators":28,"variable_declarator":29,",":30,"variable_id":31,"=":32,"expression":33,"Double":34,"Boolean":35,"String":36,"Int":37,"Char":38,"(":39,"params_list_opt":40,")":41,":":42,"block":43,"Void":44,"Principal":45,"params_list":46,"param":47,"INDENT":48,"body_block_opt":49,"DEDENT":50,"body_block":51,"body_stmt":52,"function_call_stmt":53,"if_stmt":54,"for_stmt":55,"while_stmt":56,"drawAST_stmt":57,"drawEXP_stmt":58,"drawTS_stmt":59,"show_stmt":60,"small_stmt":61,"break_stmt":62,"continue_stmt":63,"return_stmt":64,"list_values_opt":65,"list_values":66,"Si":67,"else_opt":68,"else_stmt":69,"Sino":70,"Para":71,"init_for":72,";":73,"op_for":74,"++":75,"--":76,"Mientras":77,"Mostrar":78,"string_literal":79,"format_expressions_opt":80,"format_expressions":81,"DibujarAST":82,"DibujarEXP":83,"DibujarTS":84,"Retorno":85,"return_expression_opt":86,"Detener":87,"Continuar":88,"conditional_expression":89,"conditional_or_expression":90,"conditional_xor_expression":91,"||":92,"conditional_and_expression":93,"!&":94,"equality_expression":95,"&&":96,"relational_expression":97,"==":98,"!=":99,"~":100,"additive_expression":101,"<":102,">":103,"<=":104,">=":105,"multiplicative_expression":106,"+":107,"-":108,"pow_expression":109,"*":110,"/":111,"%":112,"unary_expression":113,"^":114,"value_literal":115,"!":116,"char_literal":117,"true":118,"false":119,"STRING":120,"CHAR_LITERAL":121,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",13:"Importar",14:"NAME",15:".",16:"crl",19:"Incerteza",20:"NUMBER",21:"NEWLINE",30:",",32:"=",34:"Double",35:"Boolean",36:"String",37:"Int",38:"Char",39:"(",41:")",42:":",44:"Void",45:"Principal",48:"INDENT",50:"DEDENT",67:"Si",70:"Sino",71:"Para",73:";",75:"++",76:"--",77:"Mientras",78:"Mostrar",82:"DibujarAST",83:"DibujarEXP",84:"DibujarTS",85:"Retorno",87:"Detener",88:"Continuar",92:"||",94:"!&",96:"&&",98:"==",99:"!=",100:"~",102:"<",103:">",104:"<=",105:">=",107:"+",108:"-",110:"*",111:"/",112:"%",114:"^",116:"!",118:"true",119:"false",120:"STRING",121:"CHAR_LITERAL"},
productions_: [0,[3,1],[4,2],[5,2],[7,2],[9,0],[9,1],[11,1],[11,2],[12,5],[10,0],[10,1],[18,3],[17,0],[17,1],[8,0],[8,1],[22,1],[22,2],[22,2],[23,2],[23,2],[23,2],[24,2],[28,1],[28,3],[29,1],[29,1],[31,1],[25,3],[27,1],[27,1],[27,1],[27,1],[27,1],[26,7],[26,7],[26,7],[40,0],[40,1],[46,1],[46,3],[47,2],[43,4],[49,0],[49,1],[51,1],[51,2],[51,2],[51,2],[52,2],[52,2],[52,2],[52,1],[52,1],[52,1],[52,2],[52,2],[52,2],[52,2],[52,1],[61,2],[61,2],[61,2],[53,4],[65,0],[65,1],[66,1],[66,3],[54,7],[68,0],[68,1],[69,3],[55,10],[72,4],[74,1],[74,1],[56,6],[60,5],[80,0],[80,2],[81,1],[81,3],[57,4],[58,4],[59,3],[64,2],[86,0],[86,1],[62,1],[63,1],[33,1],[89,1],[90,1],[90,3],[91,1],[91,3],[93,1],[93,3],[95,1],[95,3],[95,3],[95,3],[97,1],[97,3],[97,3],[97,3],[97,3],[101,1],[101,3],[101,3],[106,1],[106,3],[106,3],[106,3],[109,1],[109,3],[113,1],[113,1],[113,1],[113,2],[113,3],[113,2],[115,1],[115,1],[115,1],[115,1],[115,1],[79,1],[117,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0] 
break;
case 2:
    
        let program = new yy.Program(this._$, $$[$0-1]);
        program.correct = yy.correct;             
        this.$ = program;
    
break;
case 3: case 4:
          
          this.$ = $$[$0-1].concat($$[$0]);
      
break;
case 5: case 10: case 38: case 44: case 65: case 70:
this.$ = []
break;
case 6: case 16: case 39: case 45: case 53: case 54: case 55: case 60: case 66: case 71: case 72: case 117:
this.$ = $$[$0]
break;
case 7: case 11: case 24: case 40: case 67:
this.$ = [$$[$0]]
break;
case 8:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 9:

        this.$ = new yy.ImportDeclaration(this._$, $$[$0-3]);
    
break;
case 12:
this.$ = new yy.Incerteza(this._$, Number($$[$0-1]))
break;
case 15:
this.$=[]
break;
case 17:
 
        if($$[$0].constructor.name === 'Array'){
            this.$ = $$[$0];
        }else{
            this.$ = [$$[$0]];
        } 
    
break;
case 18:
        
        if($$[$0].constructor.name === 'Array'){
            $$[$0-1].push(...$$[$0]);
        }else{
            $$[$0-1].push($$[$0])
        }        
        this.$ = $$[$0-1];
    
break;
case 19:

      this.$ = [];
    
break;
case 20: case 21: case 22: case 43: case 50: case 51: case 52: case 56: case 57: case 58: case 59: case 61: case 62: case 63:
this.$ = $$[$0-1]
break;
case 23:

        $$[$0].forEach(v => v.type = $$[$0-1]);
        //this.$ = new yy.VariableDeclaration(this._$, $$[$0], $$[$0-1]);
        this.$ = $$[$0];
    
break;
case 25: case 41: case 68: case 82:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 26:
         
        this.$ = new yy.VariableDeclarator(this._$, $$[$0], null);
    
break;
case 27:

        this.$ = new yy.VariableDeclarator(this._$, $$[$0].id, $$[$0].expression);
    
break;
case 28:
this.$ = new yy.Identifier(this._$, $$[$0]);
break;
case 29:
this.$ = new yy.Assignment(this._$, $$[$0-2], $$[$0])
break;
case 30:
this.$ = yy.Type.Double
break;
case 31:
this.$ = yy.Type.Boolean
break;
case 32:
this.$ = yy.Type.String
break;
case 33:
this.$ = yy.Type.Int
break;
case 34:
this.$ = yy.Type.Char
break;
case 35:

        this.$ = new yy.functionDeclaration(this._$, $$[$0-5], $$[$0-3], $$[$0-6], $$[$0]);
    
break;
case 36:

        this.$ = new yy.functionDeclaration(this._$, $$[$0-5], $$[$0-3], yy.Type.Void, $$[$0]);
    
break;
case 37:

        this.$ = new yy.functionMain(this._$, $$[$0]);
    
break;
case 42:
this.$ = new yy.functionParam(this._$, $$[$0-1], $$[$0])
break;
case 46:

        if($$[$0].constructor.name === 'Array'){
            this.$ = $$[$0];
        }else{
            this.$ = [$$[$0]];
        }         
    
break;
case 47:
        
        if($$[$0].constructor.name === 'Array'){
            $$[$0-1].push(...$$[$0]);
        }else{
            $$[$0-1].push($$[$0]);
        }                
        this.$ = $$[$0-1];
    
break;
case 48: case 49: case 79:
this.$ = [];
break;
case 64:
this.$ = new yy.CallFunction(this._$, $$[$0-3], $$[$0-1])
break;
case 69:
this.$ = new yy.IfStmt(this._$, $$[$0-4], $$[$0-1], $$[$0])
break;
case 73:
        
        this.$ = new yy.forStmt(this._$, $$[$0], $$[$0-7], $$[$0-5], $$[$0-3]);
    
break;
case 74:
this.$ = new yy.VariableDeclarator(this._$, $$[$0-2], $$[$0]);
break;
case 75: case 76:
this.$ = yytext;
break;
case 77:
this.$ = new yy.whileStmt(this._$, $$[$0], $$[$0-3]);
break;
case 78:
this.$ = new yy.Mostrar(this._$, $$[$0-2], $$[$0-1]);
break;
case 80: case 88: case 91: case 92: case 93: case 95: case 97: case 99: case 103: case 108: case 111: case 115:
this.$ = $$[$0];
break;
case 81:
this.$ = [$$[$0]];
break;
case 83:
this.$ = new yy.DibujarAST(this._$, $$[$0-1]);
break;
case 84:
this.$ = new yy.DibujarEXP($$[$0-1]);
break;
case 85:
this.$ = new yy.DibujarTS(this._$);
break;
case 86:
this.$ = new yy.returnStmt(this._$, $$[$0])
break;
case 87:
this.$ = null;
break;
case 89:
this.$ = new yy.breakStmt(this._$);
break;
case 90:
this.$ = new yy.continueStmt(this._$);
break;
case 94: case 96: case 98:
this.$ = new yy.LogicalExpression(this._$, yy.Type.Boolean, $$[$0-2], $$[$0-1], $$[$0]);
break;
case 100: case 101: case 102: case 104: case 105: case 106: case 107:
this.$ = new yy.BinaryExpression(this._$, yy.Type.Boolean, $$[$0-2], $$[$0-1], $$[$0]);
break;
case 109: case 110: case 112: case 113: case 114: case 116:
this.$ = new yy.BinaryExpression(this._$, null, $$[$0-2], $$[$0-1], $$[$0]);
break;
case 118: case 119:
this.$ = new yy.UnaryExpression(this._$, null, null, $$[$0]);
break;
case 120: case 122:

        $$[$0].operator = $$[$0-1];
        this.$ = $$[$0];
    
break;
case 121:
this.$ = $$[$0-1];
break;
case 123:
this.$ = new yy.UnaryExpression(this._$, yy.Type.String, null, $$[$0]);
break;
case 124:

        let tp;
        let num = Number($$[$0]);
        num % 1 != 0 ? tp = yy.Type.Double
                            : tp = yy.Type.Int
        this.$ = new yy.UnaryExpression(this._$, tp, null, num);
    
break;
case 125:
this.$ = new yy.UnaryExpression(this._$, yy.Type.Char, null, $$[$0]);
break;
case 126:
this.$ = new yy.UnaryExpression(this._$, yy.Type.Boolean, null, true);
break;
case 127:
this.$ = new yy.UnaryExpression(this._$, yy.Type.Boolean, null, false);
break;
case 128:

        let val1 = $$[$0].replaceAll("\"", "");
        this.$ = val1;
    
break;
case 129:

        let val2 = $$[$0].replaceAll("'", "");
        this.$ = val2;
    
break;
}
},
table: [o($V0,[2,5],{3:1,4:2,5:3,7:4,9:5,11:6,12:7,13:$V1}),{1:[3]},{1:[2,1]},{6:[1,9]},{2:[1,13],6:[2,15],8:10,14:$V2,22:11,23:12,24:14,25:15,26:16,27:17,31:18,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,44:$V8},o($V9,[2,10],{10:26,18:27,19:[1,28]}),o($V0,[2,6],{12:29,13:$V1}),o($Va,[2,7]),{14:[1,30]},{1:[2,2]},{6:[2,3]},{6:[2,16],14:$V2,23:31,24:14,25:15,26:16,27:17,31:18,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,44:$V8},o($Vb,[2,17]),{14:$V2,23:32,24:14,25:15,26:16,27:17,31:18,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,44:$V8},o($Vb,$Vc,{17:33,21:$Vd}),o($Vb,$Vc,{17:35,21:$Vd}),o($Vb,$Vc,{17:36,21:$Vd}),{14:[1,38],25:41,28:37,29:39,31:40},{32:$Ve},{14:[1,43],45:[1,44]},{14:[2,30]},{14:[2,31]},{14:[2,32]},{14:[2,33]},{14:[2,34]},o([6,14,21,30,32,34,35,36,37,38,41,44,50,67,71,77,78,82,83,84,85,87,88],$Vf),o($V9,[2,4]),o($V9,[2,11]),{20:[1,45]},o($Va,[2,8]),{15:[1,46]},o($Vb,[2,18]),o($Vb,[2,19]),o($Vb,[2,20]),o([2,6,13,14,19,34,35,36,37,38,44,50,67,71,77,78,82,83,84,85,87,88],[2,14]),o($Vb,[2,21]),o($Vb,[2,22]),o([6,14,21,34,35,36,37,38,44,50,67,71,77,78,82,83,84,85,87,88],[2,23],{30:[1,47]}),o([6,14,21,30,32,34,35,36,37,38,44],$Vf,{39:[1,48]}),o($Vg,[2,24]),o($Vg,[2,26],{32:$Ve}),o($Vg,[2,27]),{14:$Vh,20:$Vi,31:61,33:49,39:$Vj,53:62,79:66,89:50,90:51,91:52,93:53,95:54,97:55,101:56,106:57,108:$Vk,109:58,113:59,115:60,116:$Vl,117:68,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{39:[1,74]},{39:[1,75]},o($V9,$Vc,{17:76,21:$Vd}),{16:[1,77]},{14:$V2,25:41,29:78,31:40},{27:82,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,40:79,41:$Vq,46:80,47:81},o($Vg,[2,29]),o($Vr,[2,91]),o($Vr,[2,92],{92:[1,83]}),o($Vs,[2,93],{94:$Vt}),o($Vu,[2,95],{96:$Vv}),o($Vw,[2,97],{98:$Vx,99:$Vy,100:$Vz}),o($VA,[2,99],{102:$VB,103:$VC,104:$VD,105:$VE}),o($VF,[2,103],{107:$VG,108:$VH}),o($VI,[2,108],{110:$VJ,111:$VK,112:$VL}),o($VM,[2,111]),o($VM,[2,115],{114:[1,98]}),o($VN,[2,117]),o($VN,[2,118]),o($VN,[2,119]),{14:$Vh,20:$Vi,31:61,39:$Vj,53:62,79:66,108:$Vk,113:99,115:60,116:$Vl,117:68,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{14:$Vh,20:$Vi,31:61,33:100,39:$Vj,53:62,79:66,89:50,90:51,91:52,93:53,95:54,97:55,101:56,106:57,108:$Vk,109:58,113:59,115:60,116:$Vl,117:68,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{14:$Vh,20:$Vi,31:61,39:$Vj,53:62,79:66,108:$Vk,113:101,115:60,116:$Vl,117:68,118:$Vm,119:$Vn,120:$Vo,121:$Vp},o($VN,[2,123]),o($VN,[2,124]),o($VN,[2,125]),o($VN,[2,126]),o($VN,[2,127]),o([6,14,21,30,32,34,35,36,37,38,41,44,50,67,71,73,77,78,82,83,84,85,87,88,92,94,96,98,99,100,102,103,104,105,107,108,110,111,112,114],$Vf,{39:[1,102]}),o($VN,[2,128]),o($VN,[2,129]),{27:82,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,40:103,41:$Vq,46:80,47:81},{27:82,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,40:104,41:$Vq,46:80,47:81},o($V9,[2,12]),o($Va,$Vc,{17:105,21:$Vd}),o($Vg,[2,25]),{41:[1,106]},{30:[1,107],41:[2,39]},o($VO,[2,40]),{14:$V2,31:108},{14:$Vh,20:$Vi,31:61,39:$Vj,53:62,79:66,91:109,93:53,95:54,97:55,101:56,106:57,108:$Vk,109:58,113:59,115:60,116:$Vl,117:68,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{14:$Vh,20:$Vi,31:61,39:$Vj,53:62,79:66,93:110,95:54,97:55,101:56,106:57,108:$Vk,109:58,113:59,115:60,116:$Vl,117:68,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{14:$Vh,20:$Vi,31:61,39:$Vj,53:62,79:66,95:111,97:55,101:56,106:57,108:$Vk,109:58,113:59,115:60,116:$Vl,117:68,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{14:$Vh,20:$Vi,31:61,39:$Vj,53:62,79:66,97:112,101:56,106:57,108:$Vk,109:58,113:59,115:60,116:$Vl,117:68,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{14:$Vh,20:$Vi,31:61,39:$Vj,53:62,79:66,97:113,101:56,106:57,108:$Vk,109:58,113:59,115:60,116:$Vl,117:68,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{14:$Vh,20:$Vi,31:61,39:$Vj,53:62,79:66,97:114,101:56,106:57,108:$Vk,109:58,113:59,115:60,116:$Vl,117:68,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{14:$Vh,20:$Vi,31:61,39:$Vj,53:62,79:66,101:115,106:57,108:$Vk,109:58,113:59,115:60,116:$Vl,117:68,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{14:$Vh,20:$Vi,31:61,39:$Vj,53:62,79:66,101:116,106:57,108:$Vk,109:58,113:59,115:60,116:$Vl,117:68,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{14:$Vh,20:$Vi,31:61,39:$Vj,53:62,79:66,101:117,106:57,108:$Vk,109:58,113:59,115:60,116:$Vl,117:68,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{14:$Vh,20:$Vi,31:61,39:$Vj,53:62,79:66,101:118,106:57,108:$Vk,109:58,113:59,115:60,116:$Vl,117:68,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{14:$Vh,20:$Vi,31:61,39:$Vj,53:62,79:66,106:119,108:$Vk,109:58,113:59,115:60,116:$Vl,117:68,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{14:$Vh,20:$Vi,31:61,39:$Vj,53:62,79:66,106:120,108:$Vk,109:58,113:59,115:60,116:$Vl,117:68,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{14:$Vh,20:$Vi,31:61,39:$Vj,53:62,79:66,108:$Vk,109:121,113:59,115:60,116:$Vl,117:68,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{14:$Vh,20:$Vi,31:61,39:$Vj,53:62,79:66,108:$Vk,109:122,113:59,115:60,116:$Vl,117:68,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{14:$Vh,20:$Vi,31:61,39:$Vj,53:62,79:66,108:$Vk,109:123,113:59,115:60,116:$Vl,117:68,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{14:$Vh,20:$Vi,31:61,39:$Vj,53:62,79:66,108:$Vk,109:124,113:59,115:60,116:$Vl,117:68,118:$Vm,119:$Vn,120:$Vo,121:$Vp},o($VN,[2,120]),{41:[1,125]},o($VN,[2,122]),{14:$Vh,20:$Vi,31:61,33:128,39:$Vj,41:[2,65],53:62,65:126,66:127,79:66,89:50,90:51,91:52,93:53,95:54,97:55,101:56,106:57,108:$Vk,109:58,113:59,115:60,116:$Vl,117:68,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{41:[1,129]},{41:[1,130]},o($Va,[2,9]),{42:[1,131]},{27:82,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,47:132},o($VO,[2,42]),o($Vs,[2,94],{94:$Vt}),o($Vu,[2,96],{96:$Vv}),o($Vw,[2,98],{98:$Vx,99:$Vy,100:$Vz}),o($VA,[2,100],{102:$VB,103:$VC,104:$VD,105:$VE}),o($VA,[2,101],{102:$VB,103:$VC,104:$VD,105:$VE}),o($VA,[2,102],{102:$VB,103:$VC,104:$VD,105:$VE}),o($VF,[2,104],{107:$VG,108:$VH}),o($VF,[2,105],{107:$VG,108:$VH}),o($VF,[2,106],{107:$VG,108:$VH}),o($VF,[2,107],{107:$VG,108:$VH}),o($VI,[2,109],{110:$VJ,111:$VK,112:$VL}),o($VI,[2,110],{110:$VJ,111:$VK,112:$VL}),o($VM,[2,112]),o($VM,[2,113]),o($VM,[2,114]),o($VM,[2,116]),o($VN,[2,121]),{41:[1,133]},{30:[1,134],41:[2,66]},o($VO,[2,67]),{42:[1,135]},{42:[1,136]},{21:$VP,43:137},o($VO,[2,41]),o($VN,[2,64]),{14:$Vh,20:$Vi,31:61,33:139,39:$Vj,53:62,79:66,89:50,90:51,91:52,93:53,95:54,97:55,101:56,106:57,108:$Vk,109:58,113:59,115:60,116:$Vl,117:68,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{21:$VP,43:140},{21:$VP,43:141},o($VQ,[2,35]),{48:[1,142]},o($VO,[2,68]),o($VQ,[2,36]),o($VQ,[2,37]),{2:[1,146],14:$Vh,24:147,25:148,27:158,31:18,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,49:143,50:[2,44],51:144,52:145,53:149,54:150,55:151,56:152,57:153,58:154,59:155,60:156,61:157,62:166,63:167,64:168,67:$VR,71:$VS,77:$VT,78:$VU,82:$VV,83:$VW,84:$VX,85:$VY,87:$VZ,88:$V_},{50:[1,172]},{14:$Vh,24:147,25:148,27:158,31:18,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,50:[2,45],52:173,53:149,54:150,55:151,56:152,57:153,58:154,59:155,60:156,61:157,62:166,63:167,64:168,67:$VR,71:$VS,77:$VT,78:$VU,82:$VV,83:$VW,84:$VX,85:$VY,87:$VZ,88:$V_},o($V$,[2,46]),{14:$Vh,21:[1,175],24:147,25:148,27:158,31:18,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,52:174,53:149,54:150,55:151,56:152,57:153,58:154,59:155,60:156,61:157,62:166,63:167,64:168,67:$VR,71:$VS,77:$VT,78:$VU,82:$VV,83:$VW,84:$VX,85:$VY,87:$VZ,88:$V_},o($V$,$Vc,{17:176,21:$Vd}),o($V$,$Vc,{17:177,21:$Vd}),o($V$,$Vc,{17:178,21:$Vd}),o($V$,[2,53]),o($V$,[2,54]),o($V$,[2,55]),o($V$,$Vc,{17:179,21:$Vd}),o($V$,$Vc,{17:180,21:$Vd}),o($V$,$Vc,{17:181,21:$Vd}),o($V$,$Vc,{17:182,21:$Vd}),o($V$,[2,60]),{14:$V2,25:41,28:37,29:39,31:40},{39:[1,183]},{39:[1,184]},{39:[1,185]},{39:[1,186]},{39:[1,187]},{39:[1,188]},{39:[1,189]},o($V$,$Vc,{17:190,21:$Vd}),o($V$,$Vc,{17:191,21:$Vd}),{21:[1,192]},o($V01,[2,89]),o($V01,[2,90]),{14:$Vh,20:$Vi,21:[2,87],31:61,33:194,39:$Vj,53:62,79:66,86:193,89:50,90:51,91:52,93:53,95:54,97:55,101:56,106:57,108:$Vk,109:58,113:59,115:60,116:$Vl,117:68,118:$Vm,119:$Vn,120:$Vo,121:$Vp},o([6,14,21,34,35,36,37,38,44,50,67,70,71,77,78,82,83,84,85,87,88],[2,43]),o($V$,[2,47]),o($V$,[2,48]),o($V$,[2,49]),o($V$,[2,50]),o($V$,[2,51]),o($V$,[2,52]),o($V$,[2,56]),o($V$,[2,57]),o($V$,[2,58]),o($V$,[2,59]),{14:$Vh,20:$Vi,31:61,33:195,39:$Vj,53:62,79:66,89:50,90:51,91:52,93:53,95:54,97:55,101:56,106:57,108:$Vk,109:58,113:59,115:60,116:$Vl,117:68,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{37:[1,197],72:196},{14:$Vh,20:$Vi,31:61,33:198,39:$Vj,53:62,79:66,89:50,90:51,91:52,93:53,95:54,97:55,101:56,106:57,108:$Vk,109:58,113:59,115:60,116:$Vl,117:68,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{14:$V2,31:199},{14:$Vh,20:$Vi,31:61,33:200,39:$Vj,53:62,79:66,89:50,90:51,91:52,93:53,95:54,97:55,101:56,106:57,108:$Vk,109:58,113:59,115:60,116:$Vl,117:68,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{41:[1,201]},{79:202,120:$Vo},o($V$,[2,61]),o($V$,[2,62]),o($V$,[2,63]),{21:[2,86]},{21:[2,88]},{41:[1,203]},{73:[1,204]},{14:$V2,31:205},{41:[1,206]},{41:[1,207]},{41:[1,208]},o($V01,[2,85]),{30:[1,210],41:[2,79],80:209},{42:[1,211]},{14:$Vh,20:$Vi,31:61,33:212,39:$Vj,53:62,79:66,89:50,90:51,91:52,93:53,95:54,97:55,101:56,106:57,108:$Vk,109:58,113:59,115:60,116:$Vl,117:68,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{32:[1,213]},{42:[1,214]},o($V01,[2,83]),o($V01,[2,84]),{41:[1,215]},{14:$Vh,20:$Vi,31:61,33:217,39:$Vj,53:62,79:66,81:216,89:50,90:51,91:52,93:53,95:54,97:55,101:56,106:57,108:$Vk,109:58,113:59,115:60,116:$Vl,117:68,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{21:$VP,43:218},{73:[1,219]},{14:$Vh,20:$Vi,31:61,33:220,39:$Vj,53:62,79:66,89:50,90:51,91:52,93:53,95:54,97:55,101:56,106:57,108:$Vk,109:58,113:59,115:60,116:$Vl,117:68,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{21:$VP,43:221},o($V01,[2,78]),{30:[1,222],41:[2,80]},o($VO,[2,81]),o($V$,[2,70],{68:223,69:224,70:[1,225]}),{74:226,75:[1,227],76:[1,228]},{73:[2,74]},o($V$,[2,77]),{14:$Vh,20:$Vi,31:61,33:229,39:$Vj,53:62,79:66,89:50,90:51,91:52,93:53,95:54,97:55,101:56,106:57,108:$Vk,109:58,113:59,115:60,116:$Vl,117:68,118:$Vm,119:$Vn,120:$Vo,121:$Vp},o($V$,[2,69]),o($V$,[2,71]),{42:[1,230]},{41:[1,231]},{41:[2,75]},{41:[2,76]},o($VO,[2,82]),{21:$VP,43:232},{42:[1,233]},o($V$,[2,72]),{21:$VP,43:234},o($V$,[2,73])],
defaultActions: {2:[2,1],9:[2,2],10:[2,3],20:[2,30],21:[2,31],22:[2,32],23:[2,33],24:[2,34],193:[2,86],194:[2,88],220:[2,74],227:[2,75],228:[2,76]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: 
                            // if the last statement in indented, need to force a dedent before EOF                            
                            if (this.indents == undefined) { this.indents = [0]; }                            
                            if (this.indents.length > 1) { 
                               this.begin( 'DEDENTS' ); 
                               this.unput(' '); // make sure EOF is not triggered 
                               this.dedents = 1; 
                               this.indents.pop();
                            } else { 
                                return 6; 
                            } 
                        
break;
case 1: if (this.indent == undefined) this.indent = 0; this.indent += 1 
break;
case 2: if (this.indent == undefined) this.indent = 0; this.indent = ( this.indent + 8 ) & -7 
break;
case 3: this.indent = 0 
break;
case 4:/* skip comments */
break;
case 5: 
                            this.unput( yy_.yytext )
                            if (this.indents == undefined) this.indents = [0];
                            var last = this.indents[ this.indents.length - 1 ]
                            if (this.indent == undefined) this.indent = 0;
                            if ( this.indent > last ) {
                                this.begin( 'INLINE' )
                                this.indents.push( this.indent )
                                return 48
                            } else if ( this.indent < last ) {
                                this.begin( 'DEDENTS' )
                                this.dedents = 0 // how many dedents occured
                                while( this.indents.length ) {
                                    this.dedents += 1
                                    this.indents.pop()
                                    last = this.indents[ this.indents.length - 1 ]
                                    if ( last == this.indent ) break
                                }
                                if ( !this.indents.length ) {
                                    yy.logLexicalError(yy_.yylloc, `Error de tabulación`);                                    
                                }
                            } else {
                                this.begin( 'INLINE' )
                            }
                        
break;
case 6:                            
                            this.unput( yy_.yytext )
                            if (this.dedents == undefined) this.dedents = 0;                            
                            if ( this.dedents-- > 0 ) {
                                return 50
                            } else {
                                this.begin( 'INLINE' )
                            }
                        
break;
case 7:
                            // implicit line joining
                            if (this.brackets_count == undefined) this.brackets_count = 0;
                            if ( this.brackets_count <= 0 ) {
                                this.indent = 0; 
                                this.begin( 'INITIAL' )
                                return 21
                            }
                        
break;
case 8:/* skip comments */
break;
case 9:/* skip line continuations */
break;
case 10:/* skip whitespace, separate tokens */
break;
case 11:return 121
break;
case 12:return 20
break;
case 13:return 20
break;
case 14:return 120
break;
case 15:
                            const keywords = [
                                "Importar", "Incerteza", "crl", 
                                "Double", "Boolean", "String", "Int", "Char", "Void",
                                "true", "false", "Principal", "Retorno", "Para", "Mientras",
                                "Si", "Sino", "Detener", "Continuar", "Mostrar", 
                                "DibujarAST", "DibujarEXP", "DibujarTS"
                            ]
                            return ( keywords.indexOf( yy_.yytext ) === -1 )
                                ? 'NAME'
                                : yy_.yytext;
                        
break;
case 16:
                            if (this.brackets_count == undefined) this.brackets_count = 0;
                            if (yy_.yytext == '(' ) {
                                this.brackets_count += 1
                            } else if (yy_.yytext == ')' ) {
                                this.brackets_count -= 1
                            }
                            return yy_.yytext 
                        
break;
case 17:                            
                            yy.logLexicalError(yy_.yylloc, `Caracte inesperado ${yy_.yytext}`);
                        
break;
}
},
rules: [/^(?:$)/,/^(?: )/,/^(?:\t)/,/^(?:\n)/,/^(?:(((''')([^(\'\'\')]|')*('''))|((!!)[^\n]*)))/,/^(?:.)/,/^(?:.)/,/^(?:\n)/,/^(?:(((''')([^(\'\'\')]|')*('''))|((!!)[^\n]*)))/,/^(?:\\\n[\ \t\f]*)/,/^(?:[\ \t\f]+)/,/^(?:('(([^\\\n\']))'))/,/^(?:((((([1-9]([0-9])*)|0)))(\.([0-9])+)?))/,/^(?:(((([1-9]([0-9])*)|0))))/,/^(?:("(([^\\\n\"])|(\\.|\\\n))*"))/,/^(?:((((_)|(([A-Z]))|(([a-z]))))((((_)|(([A-Z]))|(([a-z])))|([0-9])))*))/,/^(?:(\+\+|--|\+|-|\*|\/|%|\^|\.|:|;|,|\(|\)|==|!=|<=|>=|<|>|~|&&|\|\||!&|!|=))/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5],"inclusive":true},"INLINE":{"rules":[0,7,8,9,10,11,12,13,14,15,16,17],"inclusive":true},"DEDENTS":{"rules":[6],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}