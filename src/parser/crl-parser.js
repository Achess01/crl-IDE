/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var crlParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[6,14,19,35,36,37,38,39,45],$V1=[1,8],$V2=[1,24],$V3=[1,19],$V4=[1,20],$V5=[1,21],$V6=[1,22],$V7=[1,23],$V8=[1,18],$V9=[6,14,35,36,37,38,39,45],$Va=[6,13,14,19,35,36,37,38,39,45],$Vb=[2,13],$Vc=[1,32],$Vd=[1,38],$Ve=[1,41],$Vf=[14,30],$Vg=[2,27],$Vh=[6,14,21,35,36,37,38,39,45,51,68,72,77,78,82,83,84,85,87,88],$Vi=[1,60],$Vj=[1,66],$Vk=[1,63],$Vl=[1,65],$Vm=[1,62],$Vn=[1,64],$Vo=[1,67],$Vp=[1,68],$Vq=[1,69],$Vr=[2,37],$Vs=[6,14,21,31,35,36,37,38,39,42,45,51,68,72,73,77,78,82,83,84,85,87,88],$Vt=[6,14,21,31,35,36,37,38,39,42,45,51,68,72,73,77,78,82,83,84,85,87,88,92],$Vu=[1,80],$Vv=[6,14,21,31,35,36,37,38,39,42,45,51,68,72,73,77,78,82,83,84,85,87,88,92,94],$Vw=[1,81],$Vx=[6,14,21,31,35,36,37,38,39,42,45,51,68,72,73,77,78,82,83,84,85,87,88,92,94,96],$Vy=[1,82],$Vz=[1,83],$VA=[1,84],$VB=[6,14,21,31,35,36,37,38,39,42,45,51,68,72,73,77,78,82,83,84,85,87,88,92,94,96,98,99,100],$VC=[1,85],$VD=[1,86],$VE=[1,87],$VF=[1,88],$VG=[6,14,21,31,35,36,37,38,39,42,45,51,68,72,73,77,78,82,83,84,85,87,88,92,94,96,98,99,100,102,103,104,105],$VH=[1,89],$VI=[1,90],$VJ=[6,14,21,31,35,36,37,38,39,42,45,51,68,72,73,77,78,82,83,84,85,87,88,92,94,96,98,99,100,102,103,104,105,107,108],$VK=[1,91],$VL=[1,92],$VM=[1,93],$VN=[6,14,21,31,35,36,37,38,39,42,45,51,68,72,73,77,78,82,83,84,85,87,88,92,94,96,98,99,100,102,103,104,105,107,108,110,111,112],$VO=[6,14,21,31,35,36,37,38,39,42,45,51,68,72,73,77,78,82,83,84,85,87,88,92,94,96,98,99,100,102,103,104,105,107,108,110,111,112,114],$VP=[1,95],$VQ=[31,42],$VR=[1,134],$VS=[6,14,21,35,36,37,38,39,45],$VT=[1,154],$VU=[1,155],$VV=[1,156],$VW=[1,157],$VX=[1,161],$VY=[1,158],$VZ=[1,159],$V_=[1,160],$V$=[1,167],$V01=[1,165],$V11=[1,166],$V21=[14,35,36,37,38,39,51,68,72,77,78,82,83,84,85,87,88],$V31=[14,21,35,36,37,38,39,51,68,72,77,78,82,83,84,85,87,88];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"initialState":3,"file_input":4,"file_input0":5,"EOF":6,"header_stmt":7,"input_stmt":8,"imports_opt":9,"incert_opt":10,"imports":11,"import":12,"Importar":13,"NAME":14,".":15,"crl":16,"new_line_opt":17,"incert":18,"Incerteza":19,"NUMBER":20,"NEWLINE":21,"input_stmt0":22,"global_stmt":23,"variable_declarators":24,"variable_assignment":25,"method_declarator":26,"type":27,"variable_list_declarators":28,"variable_declarator":29,"variable_list_declarator":30,",":31,"variable_id":32,"=":33,"expression":34,"Double":35,"Boolean":36,"String":37,"Int":38,"Char":39,"(":40,"params_list_opt":41,")":42,":":43,"block":44,"Void":45,"Principal":46,"params_list":47,"param":48,"INDENT":49,"body_block_opt":50,"DEDENT":51,"body_block":52,"body_stmt":53,"function_call_stmt":54,"if_stmt":55,"for_stmt":56,"while_stmt":57,"drawAST_stmt":58,"drawEXP_stmt":59,"drawTS_stmt":60,"show_stmt":61,"small_stmt":62,"break_stmt":63,"continue_stmt":64,"return_stmt":65,"list_values_opt":66,"list_values":67,"Si":68,"else_opt":69,"else_stmt":70,"Sino":71,"Para":72,";":73,"op_for":74,"++":75,"--":76,"Mientras":77,"Mostrar":78,"STRING":79,"format_expressions_opt":80,"format_expressions":81,"DibujarAST":82,"DibujarEXP":83,"DibujarTS":84,"Retorno":85,"return_expression_opt":86,"Detener":87,"Continuar":88,"conditional_expression":89,"conditional_or_expression":90,"conditional_xor_expression":91,"||":92,"conditional_and_expression":93,"!&":94,"equality_expression":95,"&&":96,"relational_expression":97,"==":98,"!=":99,"~":100,"additive_expression":101,"<":102,">":103,"<=":104,">=":105,"multiplicative_expression":106,"+":107,"-":108,"pow_expression":109,"*":110,"/":111,"%":112,"unary_expression":113,"^":114,"value_literal":115,"MINUS":116,"!":117,"CHAR_LITERAL":118,"true":119,"false":120,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",13:"Importar",14:"NAME",15:".",16:"crl",19:"Incerteza",20:"NUMBER",21:"NEWLINE",30:"variable_list_declarator",31:",",33:"=",35:"Double",36:"Boolean",37:"String",38:"Int",39:"Char",40:"(",42:")",43:":",45:"Void",46:"Principal",49:"INDENT",51:"DEDENT",68:"Si",71:"Sino",72:"Para",73:";",75:"++",76:"--",77:"Mientras",78:"Mostrar",79:"STRING",82:"DibujarAST",83:"DibujarEXP",84:"DibujarTS",85:"Retorno",87:"Detener",88:"Continuar",92:"||",94:"!&",96:"&&",98:"==",99:"!=",100:"~",102:"<",103:">",104:"<=",105:">=",107:"+",108:"-",110:"*",111:"/",112:"%",114:"^",116:"MINUS",117:"!",118:"CHAR_LITERAL",119:"true",120:"false"},
productions_: [0,[3,1],[4,2],[5,2],[7,2],[9,0],[9,1],[11,1],[11,2],[12,5],[10,0],[10,1],[18,3],[17,0],[17,1],[8,0],[8,1],[22,1],[22,2],[23,2],[23,2],[23,2],[24,2],[28,1],[28,3],[29,1],[29,1],[32,1],[25,3],[27,1],[27,1],[27,1],[27,1],[27,1],[26,7],[26,7],[26,7],[41,0],[41,1],[47,1],[47,3],[48,2],[44,4],[50,0],[50,1],[52,1],[52,2],[53,2],[53,2],[53,2],[53,1],[53,1],[53,1],[53,2],[53,2],[53,2],[53,2],[53,1],[62,2],[62,2],[62,2],[54,4],[66,0],[66,1],[67,1],[67,3],[55,7],[69,0],[69,1],[70,3],[56,13],[74,1],[74,1],[57,6],[61,6],[80,0],[80,1],[81,1],[81,3],[58,4],[59,4],[60,3],[65,2],[86,0],[86,1],[63,1],[64,1],[34,1],[89,1],[90,1],[90,3],[91,1],[91,3],[93,1],[93,3],[95,1],[95,3],[95,3],[95,3],[97,1],[97,3],[97,3],[97,3],[97,3],[101,1],[101,3],[101,3],[106,1],[106,3],[106,3],[106,3],[109,1],[109,3],[113,1],[113,1],[113,1],[113,2],[113,3],[113,2],[115,1],[115,1],[115,1],[115,1],[115,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0] 
break;
case 105:

        let obj = new Operation($$[$0-1], {left:$$[$0-2], right:$$[$0]});        
        console.log(obj.run());
        this.$ = obj;        
    
break;
case 120:
this.$ = new Operation("un", {value: yytext})
break;
}
},
table: [o($V0,[2,5],{3:1,4:2,5:3,7:4,9:5,11:6,12:7,13:$V1}),{1:[3]},{1:[2,1]},{6:[1,9]},{6:[2,15],8:10,14:$V2,22:11,23:12,24:13,25:14,26:15,27:16,32:17,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,45:$V8},o($V9,[2,10],{10:25,18:26,19:[1,27]}),o($V0,[2,6],{12:28,13:$V1}),o($Va,[2,7]),{14:[1,29]},{1:[2,2]},{6:[2,3]},{6:[2,16],14:$V2,23:30,24:13,25:14,26:15,27:16,32:17,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,45:$V8},o($V9,[2,17]),o($V9,$Vb,{17:31,21:$Vc}),o($V9,$Vb,{17:33,21:$Vc}),o($V9,$Vb,{17:34,21:$Vc}),{14:[1,36],25:40,28:35,29:37,30:$Vd,32:39},{33:$Ve},{14:[1,42],46:[1,43]},o($Vf,[2,29]),o($Vf,[2,30]),o($Vf,[2,31]),o($Vf,[2,32]),o($Vf,[2,33]),o([6,14,21,31,33,35,36,37,38,39,42,45,51,68,72,77,78,82,83,84,85,87,88],$Vg),o($V9,[2,4]),o($V9,[2,11]),{20:[1,44]},o($Va,[2,8]),{15:[1,45]},o($V9,[2,18]),o($V9,[2,19]),o([6,13,14,19,35,36,37,38,39,45,51,68,72,77,78,82,83,84,85,87,88],[2,14]),o($V9,[2,20]),o($V9,[2,21]),o($Vh,[2,22]),o([6,14,21,33,35,36,37,38,39,45],$Vg,{40:[1,46]}),o($Vh,[2,23]),{31:[1,47]},o($Vh,[2,25],{33:$Ve}),o($Vh,[2,26]),{14:$Vi,20:$Vj,34:48,40:$Vk,54:61,79:$Vl,89:49,90:50,91:51,93:52,95:53,97:54,101:55,106:56,109:57,113:58,115:59,116:$Vm,117:$Vn,118:$Vo,119:$Vp,120:$Vq},{40:[1,70]},{40:[1,71]},o($V9,$Vb,{17:72,21:$Vc}),{16:[1,73]},{27:77,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,41:74,42:$Vr,47:75,48:76},{14:$V2,25:40,29:78,32:39},o($Vh,[2,28]),o($Vs,[2,87]),o($Vs,[2,88],{92:[1,79]}),o($Vt,[2,89],{94:$Vu}),o($Vv,[2,91],{96:$Vw}),o($Vx,[2,93],{98:$Vy,99:$Vz,100:$VA}),o($VB,[2,95],{102:$VC,103:$VD,104:$VE,105:$VF}),o($VG,[2,99],{107:$VH,108:$VI}),o($VJ,[2,104],{110:$VK,111:$VL,112:$VM}),o($VN,[2,107]),o($VN,[2,111],{114:[1,94]}),o($VO,[2,113]),o($VO,[2,114],{40:$VP}),o($VO,[2,115]),{14:$Vi,20:$Vj,40:$Vk,54:61,79:$Vl,113:96,115:59,116:$Vm,117:$Vn,118:$Vo,119:$Vp,120:$Vq},{14:$Vi,20:$Vj,34:97,40:$Vk,54:61,79:$Vl,89:49,90:50,91:51,93:52,95:53,97:54,101:55,106:56,109:57,113:58,115:59,116:$Vm,117:$Vn,118:$Vo,119:$Vp,120:$Vq},{14:$Vi,20:$Vj,40:$Vk,54:61,79:$Vl,113:98,115:59,116:$Vm,117:$Vn,118:$Vo,119:$Vp,120:$Vq},o($VO,[2,119]),o($VO,[2,120]),o($VO,[2,121]),o($VO,[2,122]),o($VO,[2,123]),{27:77,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,41:99,42:$Vr,47:75,48:76},{27:77,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,41:100,42:$Vr,47:75,48:76},o($V9,[2,12]),o($Va,$Vb,{17:101,21:$Vc}),{42:[1,102]},{31:[1,103],42:[2,38]},o($VQ,[2,39]),{14:$V2,32:104},o($Vh,[2,24]),{14:$Vi,20:$Vj,40:$Vk,54:61,79:$Vl,91:105,93:52,95:53,97:54,101:55,106:56,109:57,113:58,115:59,116:$Vm,117:$Vn,118:$Vo,119:$Vp,120:$Vq},{14:$Vi,20:$Vj,40:$Vk,54:61,79:$Vl,93:106,95:53,97:54,101:55,106:56,109:57,113:58,115:59,116:$Vm,117:$Vn,118:$Vo,119:$Vp,120:$Vq},{14:$Vi,20:$Vj,40:$Vk,54:61,79:$Vl,95:107,97:54,101:55,106:56,109:57,113:58,115:59,116:$Vm,117:$Vn,118:$Vo,119:$Vp,120:$Vq},{14:$Vi,20:$Vj,40:$Vk,54:61,79:$Vl,97:108,101:55,106:56,109:57,113:58,115:59,116:$Vm,117:$Vn,118:$Vo,119:$Vp,120:$Vq},{14:$Vi,20:$Vj,40:$Vk,54:61,79:$Vl,97:109,101:55,106:56,109:57,113:58,115:59,116:$Vm,117:$Vn,118:$Vo,119:$Vp,120:$Vq},{14:$Vi,20:$Vj,40:$Vk,54:61,79:$Vl,97:110,101:55,106:56,109:57,113:58,115:59,116:$Vm,117:$Vn,118:$Vo,119:$Vp,120:$Vq},{14:$Vi,20:$Vj,40:$Vk,54:61,79:$Vl,101:111,106:56,109:57,113:58,115:59,116:$Vm,117:$Vn,118:$Vo,119:$Vp,120:$Vq},{14:$Vi,20:$Vj,40:$Vk,54:61,79:$Vl,101:112,106:56,109:57,113:58,115:59,116:$Vm,117:$Vn,118:$Vo,119:$Vp,120:$Vq},{14:$Vi,20:$Vj,40:$Vk,54:61,79:$Vl,101:113,106:56,109:57,113:58,115:59,116:$Vm,117:$Vn,118:$Vo,119:$Vp,120:$Vq},{14:$Vi,20:$Vj,40:$Vk,54:61,79:$Vl,101:114,106:56,109:57,113:58,115:59,116:$Vm,117:$Vn,118:$Vo,119:$Vp,120:$Vq},{14:$Vi,20:$Vj,40:$Vk,54:61,79:$Vl,106:115,109:57,113:58,115:59,116:$Vm,117:$Vn,118:$Vo,119:$Vp,120:$Vq},{14:$Vi,20:$Vj,40:$Vk,54:61,79:$Vl,106:116,109:57,113:58,115:59,116:$Vm,117:$Vn,118:$Vo,119:$Vp,120:$Vq},{14:$Vi,20:$Vj,40:$Vk,54:61,79:$Vl,109:117,113:58,115:59,116:$Vm,117:$Vn,118:$Vo,119:$Vp,120:$Vq},{14:$Vi,20:$Vj,40:$Vk,54:61,79:$Vl,109:118,113:58,115:59,116:$Vm,117:$Vn,118:$Vo,119:$Vp,120:$Vq},{14:$Vi,20:$Vj,40:$Vk,54:61,79:$Vl,109:119,113:58,115:59,116:$Vm,117:$Vn,118:$Vo,119:$Vp,120:$Vq},{14:$Vi,20:$Vj,40:$Vk,54:61,79:$Vl,109:120,113:58,115:59,116:$Vm,117:$Vn,118:$Vo,119:$Vp,120:$Vq},{14:$Vi,20:$Vj,34:123,40:$Vk,42:[2,62],54:61,66:121,67:122,79:$Vl,89:49,90:50,91:51,93:52,95:53,97:54,101:55,106:56,109:57,113:58,115:59,116:$Vm,117:$Vn,118:$Vo,119:$Vp,120:$Vq},o($VO,[2,116]),{42:[1,124]},o($VO,[2,118]),{42:[1,125]},{42:[1,126]},o($Va,[2,9]),{43:[1,127]},{27:77,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,48:128},o($VQ,[2,41]),o($Vt,[2,90],{94:$Vu}),o($Vv,[2,92],{96:$Vw}),o($Vx,[2,94],{98:$Vy,99:$Vz,100:$VA}),o($VB,[2,96],{102:$VC,103:$VD,104:$VE,105:$VF}),o($VB,[2,97],{102:$VC,103:$VD,104:$VE,105:$VF}),o($VB,[2,98],{102:$VC,103:$VD,104:$VE,105:$VF}),o($VG,[2,100],{107:$VH,108:$VI}),o($VG,[2,101],{107:$VH,108:$VI}),o($VG,[2,102],{107:$VH,108:$VI}),o($VG,[2,103],{107:$VH,108:$VI}),o($VJ,[2,105],{110:$VK,111:$VL,112:$VM}),o($VJ,[2,106],{110:$VK,111:$VL,112:$VM}),o($VN,[2,108]),o($VN,[2,109]),o($VN,[2,110]),o($VN,[2,112]),{42:[1,129]},{31:[1,130],42:[2,63]},o($VQ,[2,64]),o($VO,[2,117]),{43:[1,131]},{43:[1,132]},{21:$VR,44:133},o($VQ,[2,40]),o($VO,[2,61]),{14:$Vi,20:$Vj,34:135,40:$Vk,54:61,79:$Vl,89:49,90:50,91:51,93:52,95:53,97:54,101:55,106:56,109:57,113:58,115:59,116:$Vm,117:$Vn,118:$Vo,119:$Vp,120:$Vq},{21:$VR,44:136},{21:$VR,44:137},o($VS,[2,34]),{49:[1,138]},o($VQ,[2,65]),o($VS,[2,35]),o($VS,[2,36]),{14:$VT,24:142,25:143,27:153,32:17,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,50:139,51:[2,43],52:140,53:141,54:144,55:145,56:146,57:147,58:148,59:149,60:150,61:151,62:152,63:162,64:163,65:164,68:$VU,72:$VV,77:$VW,78:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,87:$V01,88:$V11},{51:[1,168]},{14:$VT,24:142,25:143,27:153,32:17,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,51:[2,44],53:169,54:144,55:145,56:146,57:147,58:148,59:149,60:150,61:151,62:152,63:162,64:163,65:164,68:$VU,72:$VV,77:$VW,78:$VX,82:$VY,83:$VZ,84:$V_,85:$V$,87:$V01,88:$V11},o($V21,[2,45]),o($V21,$Vb,{17:170,21:$Vc}),o($V21,$Vb,{17:171,21:$Vc}),o($V21,$Vb,{17:172,21:$Vc}),o($V21,[2,50]),o($V21,[2,51]),o($V21,[2,52]),o($V21,$Vb,{17:173,21:$Vc}),o($V21,$Vb,{17:174,21:$Vc}),o($V21,$Vb,{17:175,21:$Vc}),o($V21,$Vb,{17:176,21:$Vc}),o($V21,[2,57]),{14:$V2,25:40,28:35,29:37,30:$Vd,32:39},{33:$Vg,40:$VP},{40:[1,177]},{40:[1,178]},{40:[1,179]},{40:[1,180]},{40:[1,181]},{40:[1,182]},{40:[1,183]},o($V21,$Vb,{17:184,21:$Vc}),o($V21,$Vb,{17:185,21:$Vc}),{21:[1,186]},o($V31,[2,85]),o($V31,[2,86]),{14:$Vi,20:$Vj,21:[2,83],34:188,40:$Vk,54:61,79:$Vl,86:187,89:49,90:50,91:51,93:52,95:53,97:54,101:55,106:56,109:57,113:58,115:59,116:$Vm,117:$Vn,118:$Vo,119:$Vp,120:$Vq},o([6,14,21,35,36,37,38,39,45,51,68,71,72,77,78,82,83,84,85,87,88],[2,42]),o($V21,[2,46]),o($V21,[2,47]),o($V21,[2,48]),o($V21,[2,49]),o($V21,[2,53]),o($V21,[2,54]),o($V21,[2,55]),o($V21,[2,56]),{14:$Vi,20:$Vj,34:189,40:$Vk,54:61,79:$Vl,89:49,90:50,91:51,93:52,95:53,97:54,101:55,106:56,109:57,113:58,115:59,116:$Vm,117:$Vn,118:$Vo,119:$Vp,120:$Vq},{38:[1,190]},{14:$Vi,20:$Vj,34:191,40:$Vk,54:61,79:$Vl,89:49,90:50,91:51,93:52,95:53,97:54,101:55,106:56,109:57,113:58,115:59,116:$Vm,117:$Vn,118:$Vo,119:$Vp,120:$Vq},{14:[1,192]},{14:$Vi,20:$Vj,34:193,40:$Vk,54:61,79:$Vl,89:49,90:50,91:51,93:52,95:53,97:54,101:55,106:56,109:57,113:58,115:59,116:$Vm,117:$Vn,118:$Vo,119:$Vp,120:$Vq},{42:[1,194]},{79:[1,195]},o($V21,[2,58]),o($V21,[2,59]),o($V21,[2,60]),{21:[2,82]},{21:[2,84]},{42:[1,196]},{14:[1,197]},{42:[1,198]},{42:[1,199]},{42:[1,200]},o($V31,[2,81]),{31:[1,201]},{43:[1,202]},{33:[1,203]},{43:[1,204]},o($V31,[2,79]),o($V31,[2,80]),{14:$Vi,20:$Vj,34:207,40:$Vk,42:[2,75],54:61,79:$Vl,80:205,81:206,89:49,90:50,91:51,93:52,95:53,97:54,101:55,106:56,109:57,113:58,115:59,116:$Vm,117:$Vn,118:$Vo,119:$Vp,120:$Vq},{21:$VR,44:208},{14:$Vi,20:$Vj,34:209,40:$Vk,54:61,79:$Vl,89:49,90:50,91:51,93:52,95:53,97:54,101:55,106:56,109:57,113:58,115:59,116:$Vm,117:$Vn,118:$Vo,119:$Vp,120:$Vq},{21:$VR,44:210},{42:[1,211]},{31:[1,212],42:[2,76]},o($VQ,[2,77]),o($V21,[2,67],{69:213,70:214,71:[1,215]}),{73:[1,216]},o($V21,[2,73]),o($V31,[2,74]),{14:$Vi,20:$Vj,34:217,40:$Vk,54:61,79:$Vl,89:49,90:50,91:51,93:52,95:53,97:54,101:55,106:56,109:57,113:58,115:59,116:$Vm,117:$Vn,118:$Vo,119:$Vp,120:$Vq},o($V21,[2,66]),o($V21,[2,68]),{43:[1,218]},{14:$Vi,20:$Vj,34:219,40:$Vk,54:61,79:$Vl,89:49,90:50,91:51,93:52,95:53,97:54,101:55,106:56,109:57,113:58,115:59,116:$Vm,117:$Vn,118:$Vo,119:$Vp,120:$Vq},o($VQ,[2,78]),{21:$VR,44:220},{73:[1,221]},o($V21,[2,69]),{74:222,75:[1,223],76:[1,224]},{42:[1,225]},{42:[2,71]},{42:[2,72]},{43:[1,226]},{21:$VR,44:227},o($V21,[2,70])],
defaultActions: {2:[2,1],9:[2,2],10:[2,3],187:[2,82],188:[2,84],223:[2,71],224:[2,72]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    function Operation(type, args){
        this.type = type;
        if(this.type === 'un'){
            this.value = args.value;
        }else{
            this.left = args.left;
            this.right = args.right;
        }
        
    };

    Operation.prototype.run = function(){
        switch(this.type){
            case 'un':
                return Number(this.value);                
            case '+':
                let val = this.left.run() + this.right.run();
                return val;                
        }            
    };

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: 
                            // if the last statement in indented, need to force a dedent before EOF                            
                            if (this.indents == undefined) { this.indents = [0]; }                            
                            if (this.indents.length > 1) { 
                               this.begin( 'DEDENTS' ); 
                               this.unput(' '); // make sure EOF is not triggered 
                               this.dedents = 1; 
                               this.indents.pop();
                            } else { 
                                return 6; 
                            } 
                        
break;
case 1: if (this.indent == undefined) this.indent = 0; this.indent += 1 
break;
case 2: if (this.indent == undefined) this.indent = 0; this.indent = ( this.indent + 8 ) & -7 
break;
case 3: this.indent = 0 
break;
case 4:/* skip comments */
break;
case 5: 
                            this.unput( yy_.yytext )
                            if (this.indents == undefined) this.indents = [0];
                            var last = this.indents[ this.indents.length - 1 ]
                            if (this.indent == undefined) this.indent = 0;
                            if ( this.indent > last ) {
                                this.begin( 'INLINE' )
                                this.indents.push( this.indent )
                                return 49
                            } else if ( this.indent < last ) {
                                this.begin( 'DEDENTS' )
                                this.dedents = 0 // how many dedents occured
                                while( this.indents.length ) {
                                    this.dedents += 1
                                    this.indents.pop()
                                    last = this.indents[ this.indents.length - 1 ]
                                    if ( last == this.indent ) break
                                }
                                if ( !this.indents.length ) {
                                    console.log( "Error de tabulación" )
                                }
                            } else {
                                this.begin( 'INLINE' )
                            }
                        
break;
case 6:                            
                            this.unput( yy_.yytext )
                            if (this.dedents == undefined) this.dedents = 0;                            
                            if ( this.dedents-- > 0 ) {
                                return 51
                            } else {
                                this.begin( 'INLINE' )
                            }
                        
break;
case 7:
                            // implicit line joining
                            if (this.brackets_count == undefined) this.brackets_count = 0;
                            if ( this.brackets_count <= 0 ) {
                                this.indent = 0; 
                                this.begin( 'INITIAL' )
                                return 21
                            }
                        
break;
case 8:/* skip comments */
break;
case 9:/* skip line continuations */
break;
case 10:/* skip whitespace, separate tokens */
break;
case 11:return 118
break;
case 12:return 20
break;
case 13:return 20
break;
case 14:return 79
break;
case 15:
                            const keywords = [
                                "Importar", "Incerteza", "crl", 
                                "Double", "Boolean", "String", "Int", "Char", "Void",
                                "true", "false", "Principal", "Retorno", "Para", "Mientras",
                                "Si", "Sino", "Detener", "Continuar", "Mostrar", 
                                "DibujarAST", "DibujarEXP", "DibujarTS"
                            ]
                            return ( keywords.indexOf( yy_.yytext ) === -1 )
                                ? 'NAME'
                                : yy_.yytext;
                        
break;
case 16:
                            if (this.brackets_count == undefined) this.brackets_count = 0;
                            if (yy_.yytext == '(' ) {
                                this.brackets_count += 1
                            } else if (yy_.yytext == ')' ) {
                                this.brackets_count -= 1
                            }
                            return yy_.yytext 
                        
break;
case 17:
                            console.log( "Caracter inesperado" + yy_.yytext)
                        
break;
}
},
rules: [/^(?:$)/,/^(?: )/,/^(?:\t)/,/^(?:\n)/,/^(?:(((''')([^(\'\'\')]|')*('''))|((!!)[^\n]*)))/,/^(?:.)/,/^(?:.)/,/^(?:\n)/,/^(?:(((''')([^(\'\'\')]|')*('''))|((!!)[^\n]*)))/,/^(?:\\\n[\ \t\f]*)/,/^(?:[\ \t\f]+)/,/^(?:('(([^\\\n\']))'))/,/^(?:((((([1-9]([0-9])*)|0)))(\.([0-9])+)?))/,/^(?:(((([1-9]([0-9])*)|0))))/,/^(?:("(([^\\\n\"])|(\\.|\\\n))*"))/,/^(?:((((_)|(([A-Z]))|(([a-z]))))((((_)|(([A-Z]))|(([a-z])))|([0-9])))*))/,/^(?:(\+\+|--|\+|-|\*|\/|%|\^|\.|:|;|,|\(|\)|==|!=|<=|>=|<|>|~|&&|\|\||!&|!|=))/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5],"inclusive":true},"INLINE":{"rules":[0,7,8,9,10,11,12,13,14,15,16,17],"inclusive":true},"DEDENTS":{"rules":[6],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = crlParser;
exports.Parser = crlParser.Parser;
exports.parse = function () { return crlParser.parse.apply(crlParser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}